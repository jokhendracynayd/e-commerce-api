# Production Docker Compose Configuration
version: '3.8'

services:
  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: ecommerce_redis_prod
    restart: unless-stopped
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    networks:
      - ecommerce_network
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Elasticsearch for search
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: ecommerce_elasticsearch_prod
    restart: unless-stopped
    environment:
      - cluster.name=ecommerce-cluster
      - node.name=es-node-1
      - discovery.type=single-node
      - xpack.security.enabled=true
      - "ES_JAVA_OPTS=-Xms2g -Xmx2g"
      - network.host=0.0.0.0
      - http.port=9200
      - ELASTIC_PASSWORD=${ELASTICSEARCH_PASSWORD}
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - ecommerce_network
    healthcheck:
      test: ["CMD-SHELL", "curl -f -u elastic:${ELASTICSEARCH_PASSWORD} http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Kibana for Elasticsearch monitoring
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: ecommerce_kibana_prod
    restart: unless-stopped
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - ELASTICSEARCH_USERNAME=elastic
      - ELASTICSEARCH_PASSWORD=${ELASTICSEARCH_PASSWORD}
      - SERVER_NAME=kibana
      - SERVER_HOST=0.0.0.0
      - SERVER_PORT=5601
      - XPACK_SECURITY_ENABLED=true
    depends_on:
      elasticsearch:
        condition: service_healthy
    volumes:
      - kibana_data:/usr/share/kibana/data
    networks:
      - ecommerce_network

  # E-commerce API
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: ecommerce_api_prod
    restart: unless-stopped
    env_file:
      - .env
    environment:
      NODE_ENV: production
      # Override Redis and Elasticsearch to use containerized services
      REDIS_HOST: redis
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      ELASTICSEARCH_NODE: http://elasticsearch:9200
      ELASTICSEARCH_USERNAME: elastic
      ELASTICSEARCH_PASSWORD: ${ELASTICSEARCH_PASSWORD}
    ports:
      - "3001:3001"
    depends_on:
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    networks:
      - ecommerce_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

volumes:
  redis_data:
  elasticsearch_data:
  kibana_data:

networks:
  ecommerce_network:
    driver: bridge
