generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String          @id @default(uuid())
  email               String          @unique
  password            String
  firstName           String?
  lastName            String?
  phone               String?         @unique
  isEmailVerified     Boolean         @default(false) @map("is_email_verified")
  isPhoneVerified     Boolean         @default(false) @map("is_phone_verified")
  gender              Gender?
  status              UserStatus      @default(ACTIVE)
  role                Role            @default(USER)
  lastLoginAt         DateTime?       @map("last_login_at")
  loginIp             String?         @map("login_ip")
  signupIp            String?         @map("signup_ip")
  deletedAt           DateTime?       @map("deleted_at")
  createdAt           DateTime        @default(now()) @map("created_at")
  updatedAt           DateTime        @updatedAt @map("updated_at")
  refreshToken        String?
  profileImage        String?         @map("profile_image")
  dateOfBirth         DateTime?       @map("date_of_birth")
  bio                 String?
  preferences         Json?
  failedLoginAttempts Int             @default(0) @map("failed_login_attempts")
  lastPasswordChange  DateTime?       @map("last_password_change")
  addresses           Address[]
  cart                Cart?
  couponUsages        CouponUsage[]
  orders              Order[]
  reviews             ProductReview[]
  products            Product[]
  wishlistItems       WishlistItem[]
  activities          UserActivity[]
  browsingHistory     BrowsingHistory[]
  recommendations     ProductRecommendation[]

  @@map("users")
}

model Brand {
  id          String    @id @default(uuid())
  name        String
  slug        String    @unique
  logo        String?
  description String?
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  isFeatured  Boolean   @default(false) @map("is_featured")
  website     String?
  products    Product[]

  @@map("brands")
}

model Category {
  id                  String                  @id @default(uuid())
  name                String
  slug                String                  @unique
  description         String?
  icon                String?
  parentId            String?                 @map("parent_id")
  createdAt           DateTime                @default(now()) @map("created_at")
  updatedAt           DateTime                @updatedAt @map("updated_at")
  parent              Category?               @relation("SubCategories", fields: [parentId], references: [id])
  children            Category[]              @relation("SubCategories")
  CouponCategory      CouponCategory[]
  products            Product[]               @relation("CategoryProducts")
  subCategoryProducts Product[]               @relation("SubCategoryProducts")
  specTemplates       SpecificationTemplate[]

  @@map("categories")
}

model Tag {
  id        String       @id @default(uuid())
  name      String       @unique
  createdAt DateTime     @default(now()) @map("created_at")
  updatedAt DateTime     @updatedAt @map("updated_at")
  products  ProductTag[]

  @@map("tags")
}

model Product {
  id               String                 @id @default(uuid())
  sellerId         String?                @map("seller_id")
  title            String
  slug             String                 @unique
  description      String?
  shortDescription String?                @map("short_description")
  subtitle         String?                // Added: For color/size info like "Blue Strap, Free Size"
  brandId          String?                @map("brand_id")
  categoryId       String?                @map("category_id")
  subCategoryId    String?                @map("sub_category_id")
  price            Decimal                @db.Decimal(10, 2)
  discountPrice    Decimal?               @map("discount_price") @db.Decimal(10, 2)
  currency         String                 @default("USD")
  stockQuantity    Int                    @default(0) @map("stock_quantity")
  sku              String                 @unique
  barcode          String?
  weight           Float?
  dimensions       Json?
  isActive         Boolean                @default(true) @map("is_active")
  isFeatured       Boolean                @default(false) @map("is_featured")
  isNew            Boolean                @default(false) @map("is_new") // Added: For new product badge
  isBestSeller     Boolean                @default(false) @map("is_best_seller") // Added: For best seller badge
  isSponsored      Boolean                @default(false) @map("is_sponsored") // Added: For sponsored tag
  visibility       ProductVisibility      @default(PUBLIC)
  averageRating    Float                  @default(0) @map("average_rating")
  reviewCount      Int                    @default(0) @map("review_count")
  
  // Bank offer fields - using JSON for flexibility
  bankOffer        Json?                  @map("bank_offer") // Added: Bank offer details
  exchangeOffer    Json?                  @map("exchange_offer") // Added: Exchange offer details
  
  metaTitle        String?                @map("meta_title")
  metaDescription  String?                @map("meta_description")
  metaKeywords     String?                @map("meta_keywords")
  createdAt        DateTime               @default(now()) @map("created_at")
  updatedAt        DateTime               @updatedAt @map("updated_at")
  cartItems        CartItem[]
  CouponProduct    CouponProduct[]
  inventory        Inventory?
  inventoryLogs    InventoryLog[]
  orderItems       OrderItem[]
  deals            ProductDeal[]
  images           ProductImage[]
  reviews          ProductReview[]
  specifications   ProductSpecification[]
  tags             ProductTag[]
  variants         ProductVariant[]
  brand            Brand?                 @relation(fields: [brandId], references: [id])
  category         Category?              @relation("CategoryProducts", fields: [categoryId], references: [id])
  seller           User?                  @relation(fields: [sellerId], references: [id])
  subCategory      Category?              @relation("SubCategoryProducts", fields: [subCategoryId], references: [id])
  wishlistItems    WishlistItem[]
  browsingHistory      BrowsingHistory[]
  baseRecommendations  ProductRecommendation[] @relation("BaseProduct")
  targetRecommendations ProductRecommendation[] @relation("RecommendedProduct")
  similarityBase       ProductSimilarity[]     @relation("SimilarityBase")
  similarityTarget     ProductSimilarity[]     @relation("SimilarityTarget")

  @@index([categoryId], map: "idx_product_category")
  @@index([slug], map: "idx_product_slug")
  @@index([sellerId], map: "idx_product_seller")
  @@map("products")
}

model ProductImage {
  id        String   @id @default(uuid())
  productId String   @map("product_id")
  imageUrl  String   @map("image_url")
  altText   String?  @map("alt_text")
  position  Int      @default(0)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_images")
}

model ProductVariant {
  id              String         @id @default(uuid())
  productId       String         @map("product_id")
  variantName     String         @map("variant_name")
  color           String?        // Added: Color name (e.g., "Blue", "Red")
  colorHex        String?        @map("color_hex") // Added: Hex color code (e.g., "#0000FF")
  size            String?        // Added: Size information (e.g., "M", "Large", "128GB")
  variantImage    String?        @map("variant_image") // Added: Specific image for this variant
  sku             String         @unique
  price           Decimal        @db.Decimal(10, 2)
  stockQuantity   Int            @default(0) @map("stock_quantity")
  additionalPrice Decimal        @default(0) @map("additional_price") @db.Decimal(10, 2)
  createdAt       DateTime       @default(now()) @map("created_at")
  updatedAt       DateTime       @updatedAt @map("updated_at")
  cartItems       CartItem[]
  inventory       Inventory?
  inventoryLogs   InventoryLog[]
  orderItems      OrderItem[]
  product         Product        @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_variants")
}

model ProductTag {
  productId String   @map("product_id")
  tagId     String   @map("tag_id")
  createdAt DateTime @default(now()) @map("created_at")
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  tag       Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([productId, tagId])
  @@map("product_tags")
}

model ProductDeal {
  id        String   @id @default(uuid())
  productId String   @map("product_id")
  dealType  DealType @map("deal_type")
  discount  Decimal  @db.Decimal(5, 2)
  startTime DateTime @map("start_time")
  endTime   DateTime @map("end_time")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_deals")
}

model ProductReview {
  id                String   @id @default(uuid())
  productId         String   @map("product_id")
  userId            String   @map("user_id")
  orderId           String   @map("order_id")
  rating            Int
  title             String?  // Review title/headline
  comment           String?
  isVerifiedPurchase Boolean @default(true) @map("is_verified_purchase")
  helpfulCount      Int      @default(0) @map("helpful_count")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  
  product           Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  order             Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@unique([userId, productId, orderId])
  @@index([productId, rating])
  @@index([userId])
  @@index([orderId])
  @@map("product_reviews")
}

model Cart {
  id        String     @id @default(uuid())
  userId    String     @unique @map("user_id")
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  items     CartItem[]
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("carts")
}

model CartItem {
  id                String          @id @default(uuid())
  cartId            String          @map("cart_id")
  productId         String          @map("product_id")
  variantId         String?         @map("variant_id")
  quantity          Int
  reservationExpires DateTime?      @map("reservation_expires")
  createdAt         DateTime        @default(now()) @map("created_at")
  updatedAt         DateTime        @updatedAt @map("updated_at")
  cart              Cart            @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product           Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  variant           ProductVariant? @relation(fields: [variantId], references: [id])

  @@unique([cartId, productId, variantId])
  @@map("cart_items")
}

model Order {
  id              String        @id @default(uuid())
  userId          String?       @map("user_id")
  orderNumber     String        @unique @map("order_number")
  status          OrderStatus   @default(PENDING)
  paymentStatus   PaymentStatus @default(PENDING) @map("payment_status")
  paymentMethod   String?       @map("payment_method")
  shippingAddress Json          @map("shipping_address")
  billingAddress  Json          @map("billing_address")
  subtotal        Decimal       @db.Decimal(10, 2)
  tax             Decimal       @default(0) @db.Decimal(10, 2)
  shippingFee     Decimal       @default(0) @map("shipping_fee") @db.Decimal(10, 2)
  discount        Decimal       @default(0) @db.Decimal(10, 2)
  total           Decimal       @db.Decimal(10, 2)
  placedAt        DateTime      @default(now()) @map("placed_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")
  couponCode      String?       @map("coupon_code")
  couponUsages    CouponUsage[]
  items           OrderItem[]
  reviews         ProductReview[]
  user            User?         @relation(fields: [userId], references: [id])
  payments        Payment[]

  @@index([userId], map: "idx_order_user")
  @@map("orders")
}

model OrderItem {
  id         String          @id @default(uuid())
  orderId    String          @map("order_id")
  productId  String?         @map("product_id")
  variantId  String?         @map("variant_id")
  quantity   Int
  unitPrice  Decimal         @map("unit_price") @db.Decimal(10, 2)
  totalPrice Decimal         @map("total_price") @db.Decimal(10, 2)
  createdAt  DateTime        @default(now()) @map("created_at")
  updatedAt  DateTime        @updatedAt @map("updated_at")
  order      Order           @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product    Product?        @relation(fields: [productId], references: [id])
  variant    ProductVariant? @relation(fields: [variantId], references: [id])

  @@map("order_items")
}

model Inventory {
  id               String          @id @default(uuid())
  productId        String          @unique @map("product_id")
  variantId        String?         @unique @map("variant_id")
  stockQuantity    Int             @default(0) @map("stock_quantity")
  reservedQuantity Int             @default(0) @map("reserved_quantity")
  threshold        Int             @default(5)
  lastRestockedAt  DateTime?       @map("last_restocked_at")
  createdAt        DateTime        @default(now()) @map("created_at")
  updatedAt        DateTime        @updatedAt @map("updated_at")
  product          Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  variant          ProductVariant? @relation(fields: [variantId], references: [id])

  @@index([productId, variantId], map: "idx_inventory_product_variant")
  @@map("inventory")
}

model InventoryLog {
  id              String              @id @default(uuid())
  productId       String?             @map("product_id")
  variantId       String?             @map("variant_id")
  changeType      InventoryChangeType @map("change_type")
  quantityChanged Int                 @map("quantity_changed")
  note            String?
  createdAt       DateTime            @default(now()) @map("created_at")
  product         Product?            @relation(fields: [productId], references: [id])
  variant         ProductVariant?     @relation(fields: [variantId], references: [id])

  @@map("inventory_logs")
}

model Address {
  id             String   @id @default(uuid())
  street         String
  city           String
  state          String
  zipCode        String   @map("zip_code")
  country        String
  isDefault      Boolean  @default(false) @map("is_default")
  userId         String   @map("user_id")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")
  addressType    String?  @map("address_type")
  alternatePhone String?  @map("alternate_phone")
  landmark       String?
  locality       String?
  mobileNumber   String?  @map("mobile_number")
  name           String?
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("addresses")
}

model WishlistItem {
  id        String   @id @default(uuid())
  productId String   @map("product_id")
  addedAt   DateTime @default(now()) @map("added_at")
  userId    String   @map("user_id")
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("wishlist_items")
}

model Coupon {
  id              String           @id @default(uuid())
  code            String           @unique
  type            CouponType
  value           Decimal          @db.Decimal(10, 2)
  description     String?
  minimumPurchase Decimal?         @map("minimum_purchase") @db.Decimal(10, 2)
  usageLimit      Int?             @map("usage_limit")
  usageCount      Int              @default(0) @map("usage_count")
  perUserLimit    Int?             @map("per_user_limit")
  startDate       DateTime         @map("start_date")
  endDate         DateTime         @map("end_date")
  status          CouponStatus     @default(ACTIVE)
  createdAt       DateTime         @default(now()) @map("created_at")
  updatedAt       DateTime         @updatedAt @map("updated_at")
  categories      CouponCategory[]
  products        CouponProduct[]
  usages          CouponUsage[]

  @@map("coupons")
}

model CouponCategory {
  couponId   String   @map("coupon_id")
  categoryId String   @map("category_id")
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  coupon     Coupon   @relation(fields: [couponId], references: [id], onDelete: Cascade)

  @@id([couponId, categoryId])
  @@map("coupon_categories")
}

model CouponProduct {
  couponId  String  @map("coupon_id")
  productId String  @map("product_id")
  coupon    Coupon  @relation(fields: [couponId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@id([couponId, productId])
  @@map("coupon_products")
}

model CouponUsage {
  id             String   @id @default(uuid())
  couponId       String   @map("coupon_id")
  userId         String   @map("user_id")
  orderId        String   @map("order_id")
  discountAmount Decimal  @map("discount_amount") @db.Decimal(10, 2)
  createdAt      DateTime @default(now()) @map("created_at")
  coupon         Coupon   @relation(fields: [couponId], references: [id])
  order          Order    @relation(fields: [orderId], references: [id])
  user           User     @relation(fields: [userId], references: [id])

  @@unique([couponId, orderId])
  @@map("coupon_usages")
}

model ProductSpecification {
  id           String   @id @default(uuid())
  productId    String   @map("product_id")
  specKey      String   @map("spec_key")
  specValue    String   @map("spec_value")
  specGroup    String   @map("spec_group")
  sortOrder    Int      @default(0) @map("sort_order")
  isFilterable Boolean  @default(false) @map("is_filterable")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  product      Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, specKey])
  @@index([productId])
  @@index([specKey, specValue])
  @@map("product_specifications")
}

model SpecificationTemplate {
  id           String   @id @default(uuid())
  categoryId   String   @map("category_id")
  specKey      String   @map("spec_key")
  displayName  String   @map("display_name")
  specGroup    String   @map("spec_group")
  sortOrder    Int      @default(0) @map("sort_order")
  isRequired   Boolean  @default(false) @map("is_required")
  isFilterable Boolean  @default(false) @map("is_filterable")
  dataType     String   @default("string") @map("data_type")
  options      Json?
  category     Category @relation(fields: [categoryId], references: [id])

  @@unique([categoryId, specKey])
  @@map("specification_templates")
}

model Payment {
  id                String        @id @default(uuid())
  orderId           String        @map("order_id")
  amount            Decimal       @db.Decimal(10, 2)
  currency          String        @default("USD")
  status            PaymentStatus @default(PENDING)
  provider          String
  providerPaymentId String?       @map("provider_payment_id")
  paymentMethod     String        @map("payment_method")
  metadata          Json?
  customerEmail     String?       @map("customer_email")
  createdAt         DateTime      @default(now()) @map("created_at")
  updatedAt         DateTime      @updatedAt @map("updated_at")
  order             Order         @relation(fields: [orderId], references: [id])

  @@map("payments")
}

enum Gender {
  MALE
  FEMALE
  OTHER
  PREFER_NOT_TO_SAY
}

enum UserStatus {
  ACTIVE
  BLOCKED
  PENDING_VERIFICATION
}

enum Role {
  USER
  ADMIN
  SELLER
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  RETURNED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum ProductVisibility {
  PUBLIC
  PRIVATE
  HIDDEN
}

enum DealType {
  FLASH
  TRENDING
  DEAL_OF_DAY
}

enum InventoryChangeType {
  RESTOCK
  SALE
  RETURN
  MANUAL
}

enum CouponType {
  PERCENTAGE
  FIXED_AMOUNT
  FREE_SHIPPING
}

enum CouponStatus {
  ACTIVE
  EXPIRED
  DISABLED
}

// ===================================
// RECOMMENDATION SYSTEM MODELS
// ===================================

model UserActivity {
  id           String           @id @default(uuid())
  userId       String?          @map("user_id")
  sessionId    String           @map("session_id")
  activityType UserActivityType @map("activity_type")
  entityId     String?          @map("entity_id")
  entityType   String?          @map("entity_type")
  metadata     Json?
  ipAddress    String?          @map("ip_address")
  userAgent    String?          @map("user_agent")
  referrer     String?
  pageUrl      String?          @map("page_url")
  deviceType   String?          @map("device_type")
  duration     Int?             // Time spent in seconds
  timestamp    DateTime         @default(now())
  createdAt    DateTime         @default(now()) @map("created_at")
  updatedAt    DateTime         @updatedAt @map("updated_at")
  user         User?            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, timestamp])
  @@index([sessionId, timestamp])
  @@index([entityId, entityType])
  @@index([activityType, timestamp])
  @@index([timestamp]) // For cleanup jobs
  @@index([createdAt])
  @@map("user_activities")
}

model BrowsingHistory {
  id           String   @id @default(uuid())
  userId       String?  @map("user_id")
  sessionId    String   @map("session_id")
  productId    String   @map("product_id")
  viewedAt     DateTime @default(now()) @map("viewed_at")
  lastViewedAt DateTime @updatedAt @map("last_viewed_at")
  viewCount    Int      @default(1) @map("view_count")
  timeSpent    Int?     @map("time_spent") // in seconds
  source       String?  // e.g., "search", "category", "recommendation"
  deviceType   String?  @map("device_type")
  conversion   Boolean  @default(false) // Did this view lead to purchase?
  conversionAt DateTime? @map("conversion_at")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product      Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId]) // Prevent duplicates, update instead
  @@index([userId, lastViewedAt])
  @@index([sessionId, viewedAt])
  @@index([productId, viewedAt])
  @@index([source, viewedAt])
  @@index([conversion, conversionAt])
  @@index([createdAt])
  @@map("browsing_history")
}

model ProductRecommendation {
  id                  String             @id @default(uuid())
  userId              String?            @map("user_id")
  sessionId           String?            @map("session_id") // For anonymous users
  productId           String?            @map("product_id") // Null for global recommendations
  recommendedProductId String            @map("recommended_product_id")
  recommendationType  RecommendationType @map("recommendation_type")
  score               Float              @default(0)
  position            Int?               // Position in recommendation list
  batchId             String?            @map("batch_id") // Link to generation batch
  
  // Tracking metrics
  viewed              Boolean            @default(false)
  clicked             Boolean            @default(false)
  converted           Boolean            @default(false)
  viewedAt            DateTime?          @map("viewed_at")
  clickedAt           DateTime?          @map("clicked_at")
  convertedAt         DateTime?          @map("converted_at")
  
  // Metadata
  algorithmVersion    String?            @map("algorithm_version")
  metadata            Json?              // Store algorithm-specific data
  expiresAt           DateTime?          @map("expires_at")
  
  createdAt           DateTime           @default(now()) @map("created_at")
  updatedAt           DateTime           @updatedAt @map("updated_at")
  
  user                User?              @relation(fields: [userId], references: [id], onDelete: Cascade)
  product             Product?           @relation("BaseProduct", fields: [productId], references: [id], onDelete: Cascade)
  recommendedProduct  Product            @relation("RecommendedProduct", fields: [recommendedProductId], references: [id], onDelete: Cascade)
  batch               RecommendationBatch? @relation(fields: [batchId], references: [id])

  @@unique([userId, sessionId, productId, recommendedProductId, recommendationType])
  @@index([userId, recommendationType, score])
  @@index([sessionId, recommendationType, score])
  @@index([productId, recommendationType, score])
  @@index([recommendationType, score, createdAt])
  @@index([expiresAt]) // For cleanup
  @@index([batchId])
  @@map("product_recommendations")
}

model RecommendationBatch {
  id               String                 @id @default(uuid())
  batchType        RecommendationType     @map("batch_type")
  algorithmVersion String                 @map("algorithm_version")
  totalGenerated   Int                    @default(0) @map("total_generated")
  status           BatchStatus            @default(RUNNING)
  startedAt        DateTime               @default(now()) @map("started_at")
  completedAt      DateTime?              @map("completed_at")
  errorMessage     String?                @map("error_message")
  metadata         Json?
  createdAt        DateTime               @default(now()) @map("created_at")
  updatedAt        DateTime               @updatedAt @map("updated_at")
  
  recommendations  ProductRecommendation[]
  
  @@index([batchType, status])
  @@index([startedAt])
  @@index([createdAt])
  @@map("recommendation_batches")
}

model ProductSimilarity {
  id              String   @id @default(uuid())
  productId       String   @map("product_id")
  similarProductId String  @map("similar_product_id")
  similarityScore Float    @map("similarity_score")
  similarityType  String   // "category", "attributes", "collaborative"
  lastCalculated  DateTime @default(now()) @map("last_calculated")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  
  product         Product  @relation("SimilarityBase", fields: [productId], references: [id], onDelete: Cascade)
  similarProduct  Product  @relation("SimilarityTarget", fields: [similarProductId], references: [id], onDelete: Cascade)
  
  @@unique([productId, similarProductId, similarityType])
  @@index([productId, similarityScore])
  @@index([similarityType, similarityScore])
  @@index([createdAt])
  @@map("product_similarities")
}

// ===================================
// RECOMMENDATION SYSTEM ENUMS
// ===================================

enum UserActivityType {
  PAGE_VIEW
  PRODUCT_VIEW
  CATEGORY_VIEW
  BRAND_VIEW
  SEARCH
  FILTER_USE
  SORT_USE
  PAGINATION
  ADD_TO_CART
  REMOVE_FROM_CART
  ADD_TO_WISHLIST
  REMOVE_FROM_WISHLIST
  CHECKOUT_START
  CHECKOUT_STEP
  CHECKOUT_COMPLETE
  PRODUCT_CLICK
  PRODUCT_SHARE
  REVIEW_SUBMITTED
  COUPON_APPLIED
}

enum RecommendationType {
  PERSONALIZED
  SIMILAR_PRODUCTS
  FREQUENTLY_BOUGHT_TOGETHER
  TRENDING
  RECENTLY_VIEWED
  TOP_RATED
  BESTSELLERS
  SEASONAL
  PRICE_DROP
  NEW_ARRIVALS
  CATEGORY_TRENDING
}

enum BatchStatus {
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
}
